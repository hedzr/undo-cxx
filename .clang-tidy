# Note #1: the full list of Clang-Tidy checks can be found at
#          https://clang.llvm.org/extra/clang-tidy/checks/list.html...
# Note #2: performance-no-automatic-move shouldn't be disabled, but we have to
#          due to an issue with Qt (see
#          https://bugreports.qt.io/browse/QTBUG-85415)...
# Note #3: readability-redundant-access-specifiers shouldn't normally be
#          disabled, but Clang-Tidy gets a bit confused with access specifiers
#          like "public" vs. "public slots"...

# Note: if you make changes here, you may need to make changes in .clang-tidy
# files elsewhere in the tree; clang-tidy-10 doesn't allow selective
# inheritance of parent .clang-tidy files.


---
Checks: >-
  -*,
  clang-diagnostic-*,
  -clang-diagnostic-error,
  llvm-*,
  -llvm-header-guard,
  misc-*,
  -misc-unused-parameters,
  -misc-non-private-member-variables-in-classes,
  modernize*,
  -modernize-use-trailing-return-type,
  -modernize-use-equals-default,
  -modernize-avoid-c-arrays,
  readability,
  -google-readability-namespace-comments,
  -readability-identifier-naming
  -readability-redundant-access-specifiers

# Note that the readability-identifier-naming check is disabled, there are too
# many violations in the codebase, and they create too much noise in clang-tidy
# results.
# Naming settings are kept for documentation purposes and allowing to run the
# check if the users would override this file, e.g. via a command-line arg.
CheckOptions:
  - key:             readability-identifier-naming.ClassCase
    value:           lower_case
  - key:             readability-identifier-naming.EnumCase
    value:           UPPER_CASE
  - key:             readability-identifier-naming.FunctionCase
    value:           lower_case
  - key:             readability-identifier-naming.MemberCase
    value:           lower_case
  - key:             readability-identifier-naming.ParameterCase
    value:           lower_case
  - key:             readability-identifier-naming.UnionCase
    value:           lower_case
  - key:             readability-identifier-naming.VariableCase
    value:           lower_case

# REF
#Checks: >-
#  *,
#    -llvm-*,
#    -llvmlibc-*,
#    -altera-*,
#    -android-*,
#    -boost-*,
#    -darwin-*,
#    -fuchsia-*,
#    -linuxkernel-*,
#    -objc-*,
#    -portability-*,
#    -zircon-*,
#    -clang-analyzer-osx*,
#    -clang-analyzer-optin.cplusplus.UninitializedObject,
#    -clang-analyzer-optin.cplusplus.VirtualCall,
#    -clang-analyzer-core.NullDereference,
#    -clang-analyzer-cplusplus.NewDelete,
#    -clang-analyzer-cplusplus.PlacementNew,
#    -clang-analyzer-cplusplus.NewDeleteLeaks,
#    -clang-analyzer-cplusplus.Move,
#    -clang-diagnostic-unused-parameter,
#    -cppcoreguidelines-*,
#    cppcoreguidelines-explicit-virtual-functions,
#    cppcoreguidelines-special-member-functions,
#    -cert-err58-cpp,
#    -cert-env33-c,
#    -cert-dcl37-c,
#    -cert-dcl51-cpp,
#    -google-runtime-int,
#    -google-readability-casting,
#    -google-readability-function-size,
#    -google-readability-todo,
#    -google-readability-braces-around-statements,
#    -google-build-using-namespace,
#    -readability-magic-numbers,
#    -readability-implicit-bool-conversion,
#    -readability-function-cognitive-complexity,
#    -readability-isolate-declaration,
#    -readability-convert-member-functions-to-static,
#    -readability-container-size-empty,
#    -readability-function-size,
#    -readability-qualified-auto,
#    -readability-make-member-function-const,
#    -readability-named-parameter,
#    -modernize-use-trailing-return-type,
#    -modernize-avoid-c-arrays,
#    -modernize-use-nullptr,
#    -modernize-replace-disallow-copy-and-assign-macro,
#    -modernize-use-bool-literals,
#    -modernize-use-equals-default,
#    -modernize-use-default-member-init,
#    -modernize-use-auto,
#    -modernize-loop-convert,
#    -modernize-deprecated-headers,
#    -modernize-raw-string-literal,
#    -misc-no-recursion,
#    -misc-unused-parameters,
#    -misc-redundant-expression,
#    -misc-non-private-member-variables-in-classes,
#    -hicpp-*,
#    hicpp-exception-baseclass,
#    -performance-no-int-to-ptr,
#    -bugprone-easily-swappable-parameters,
#    -bugprone-implicit-widening-of-multiplication-result,
#    -bugprone-integer-division,
#    -bugprone-exception-escape,
#    -bugprone-reserved-identifier,
#    -bugprone-branch-clone,
#    -bugprone-narrowing-conversions,
